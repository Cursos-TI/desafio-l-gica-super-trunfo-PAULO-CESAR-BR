/***************************************************************
 * Desenvolvido por: Paulo Cesar
 * Instituição: Estácio
 * Desafio Final - Super Trunfo: Nível Mestre
 ***************************************************************/

#include <stdio.h>

// Estrutura da carta
struct Carta {
    char nomePais[50];
    int populacao;
    float area;
    float pib;
    int pontosTuristicos;
    float densidadeDemografica;
};

// Função para calcular a densidade demográfica
float calcularDensidade(int populacao, float area) {
    return populacao / area;
}

// Função para exibir os dados da carta
void exibirCarta(struct Carta c) {
    printf("País: %s\n", c.nomePais);
    printf("População: %d\n", c.populacao);
    printf("Área: %.2f km²\n", c.area);
    printf("PIB: %.2f bilhões\n", c.pib);
    printf("Pontos Turísticos: %d\n", c.pontosTuristicos);
    printf("Densidade Demográfica: %.2f hab/km²\n\n", c.densidadeDemografica);
}

// Função para obter valor do atributo
float obterValorAtributo(struct Carta c, int atributo) {
    switch (atributo) {
        case 1: return (float)c.populacao;
        case 2: return c.area;
        case 3: return c.pib;
        case 4: return (float)c.pontosTuristicos;
        case 5: return c.densidadeDemografica;
        default: return -1; // inválido
    }
}

// Função para exibir nome do atributo
const char* nomeAtributo(int atributo) {
    switch (atributo) {
        case 1: return "População";
        case 2: return "Área";
        case 3: return "PIB";
        case 4: return "Pontos Turísticos";
        case 5: return "Densidade Demográfica";
        default: return "Desconhecido";
    }
}

int main() {
    // Cartas fixas
    struct Carta carta1 = {"Brasil", 211000000, 8515767.0, 1868.0, 30, 0.0};
    struct Carta carta2 = {"Argentina", 44938712, 2780400.0, 518.0, 20, 0.0};

    // Calcular densidade
    carta1.densidadeDemografica = calcularDensidade(carta1.populacao, carta1.area);
    carta2.densidadeDemografica = calcularDensidade(carta2.populacao, carta2.area);

    // Exibir cartas
    printf("=== Carta 1 ===\n");
    exibirCarta(carta1);
    printf("=== Carta 2 ===\n");
    exibirCarta(carta2);

    int attr1 = 0, attr2 = 0;

    // Menu para o primeiro atributo
    printf("\nEscolha o PRIMEIRO atributo para comparação:\n");
    printf("1 - População\n2 - Área\n3 - PIB\n4 - Pontos Turísticos\n5 - Densidade Demográfica\n");
    printf("Opção: ");
    scanf("%d", &attr1);

    // Validação de atributo 1
    if (attr1 < 1 || attr1 > 5) {
        printf("Atributo inválido!\n");
        return 1;
    }

    // Menu para o segundo atributo (removendo o primeiro)
    printf("\nEscolha o SEGUNDO atributo (diferente do primeiro):\n");
    for (int i = 1; i <= 5; i++) {
        if (i != attr1) {
            printf("%d - %s\n", i, nomeAtributo(i));
        }
    }
    printf("Opção: ");
    scanf("%d", &attr2);

    // Verifica se o segundo atributo é válido e diferente do primeiro
    if (attr2 < 1 || attr2 > 5 || attr2 == attr1) {
        printf("Atributo inválido ou repetido!\n");
        return 1;
    }

    // Obtem os valores dos atributos
    float valor1_c1 = obterValorAtributo(carta1, attr1);
    float valor2_c1 = obterValorAtributo(carta1, attr2);

    float valor1_c2 = obterValorAtributo(carta2, attr1);
    float valor2_c2 = obterValorAtributo(carta2, attr2);

    // Comparação para cada atributo (regra: menor vence só em densidade)
    int vencedor1 = (attr1 == 5) ? (valor1_c1 < valor1_c2 ? 1 : (valor1_c2 < valor1_c1 ? 2 : 0))
                                 : (valor1_c1 > valor1_c2 ? 1 : (valor1_c2 > valor1_c1 ? 2 : 0));

    int vencedor2 = (attr2 == 5) ? (valor2_c1 < valor2_c2 ? 1 : (valor2_c2 < valor2_c1 ? 2 : 0))
                                 : (valor2_c1 > valor2_c2 ? 1 : (valor2_c2 > valor2_c1 ? 2 : 0));

    // Soma dos atributos
    float soma_c1 = valor1_c1 + valor2_c1;
    float soma_c2 = valor1_c2 + valor2_c2;

    int vencedorFinal = (soma_c1 > soma_c2) ? 1 : ((soma_c2 > soma_c1) ? 2 : 0);

    // Exibe comparação
    printf("\n===== RESULTADO DA COMPARAÇÃO =====\n");
    printf("Atributo 1 - %s:\n", nomeAtributo(attr1));
    printf("  %s: %.2f\n", carta1.nomePais, valor1_c1);
    printf("  %s: %.2f\n", carta2.nomePais, valor1_c2);
    printf("  Vencedor: %s\n", vencedor1 == 1 ? carta1.nomePais : (vencedor1 == 2 ? carta2.nomePais : "Empate"));

    printf("\nAtributo 2 - %s:\n", nomeAtributo(attr2));
    printf("  %s: %.2f\n", carta1.nomePais, valor2_c1);
    printf("  %s: %.2f\n", carta2.nomePais, valor2_c2);
    printf("  Vencedor: %s\n", vencedor2 == 1 ? carta1.nomePais : (vencedor2 == 2 ? carta2.nomePais : "Empate"));

    // Exibe soma total
    printf("\nSoma dos atributos:\n");
    printf("  %s: %.2f\n", carta1.nomePais, soma_c1);
    printf("  %s: %.2f\n", carta2.nomePais, soma_c2);

    // Resultado final
    printf("\n==== RESULTADO FINAL ====\n");
    if (vencedorFinal == 1) {
        printf("Vencedor: %s!\n", carta1.nomePais);
    } else if (vencedorFinal == 2) {
        printf("Vencedor: %s!\n", carta2.nomePais);
    } else {
        printf("Empate!\n");
    }

    return 0;
}

/***************************************************************
 * Desenvolvido por: Paulo Cesar
 * Instituição: Estácio
 ***************************************************************/
